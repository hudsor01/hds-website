/**
 * Blog Migration Script - Convert existing blog posts to Strapi format
 * Run this script after setting up Strapi to migrate your current blog content
 */

import fs from 'fs';
import path from 'path';

// Define the structure of your existing blog posts
interface ExistingBlogPost {
  title: string;
  slug: string;
  excerpt: string;
  content: string;
  publishedAt: string;
  category?: string;
  tags?: string[];
  featuredImage?: string;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    keywords?: string;
  };
}

// Your existing blog posts data
const existingPosts: ExistingBlogPost[] = [
  {
    title: "How to Increase Website Conversion Rates: 2025 Complete Guide",
    slug: "how-to-increase-website-conversion-rates-2025-guide",
    excerpt: "Discover 15 proven strategies to dramatically increase your website conversion rates in 2025. From speed optimization to psychological triggers.",
    content: `# The Conversion Rate Reality Check

The average website conversion rate is just **2.35%**. That means 97 out of every 100 visitors leave without taking action.

But here's what most business owners don't realize: **The difference between a 2% and 6% conversion rate isn't just mathematical—it's transformational.**

## Strategy 1: Speed Optimization (The 3-Second Rule)

**Impact: 15-25% conversion increase**

Google's research shows that 53% of mobile users abandon sites that take longer than 3 seconds to load. Every additional second of load time can reduce conversions by up to 7%.

### Implementation Checklist:
- Critical Resource Loading: Prioritize above-the-fold content
- Image Optimization: WebP format with progressive loading
- Code Splitting: Load only what's needed for each page
- CDN Implementation: Serve content from global edge locations

## Strategy 2: Above-the-Fold Optimization

**Impact: 20-35% conversion increase**

Users decide within 50 milliseconds whether they'll stay or leave. Your above-the-fold content must immediately communicate:
- What you offer (clarity)
- How it benefits them (value)
- What they should do next (action)

## Ready to 3x Your Conversion Rates?

Our CRO specialists have helped 200+ businesses achieve these results. Let's optimize your site for maximum conversions.`,
    publishedAt: "2024-01-15T10:00:00.000Z",
    category: "Conversion Optimization",
    tags: ["CRO", "Website Optimization", "Digital Marketing"],
    seo: {
      metaTitle: "How to Increase Website Conversion Rates: 2025 Complete Guide",
      metaDescription: "Discover 15 proven strategies to dramatically increase your website conversion rates in 2025. From speed optimization to psychological triggers.",
      keywords: "conversion rate optimization, website conversions, CRO strategies, increase conversions"
    }
  },
  {
    title: "Small Business Website Cost in 2025: Complete Pricing Guide",
    slug: "small-business-website-cost-2025",
    excerpt: "Discover the real cost of building a small business website in 2025. From DIY options to professional development, we break down every expense.",
    content: `# The Real Question Isn't "How Much?"

Every day, small business owners ask: **"How much does a website cost?"**

But that's the wrong question.

The right question is: **"What's the return on investment for each website option, and which choice positions my business for growth?"**

## DIY Website Builders ($0-500/year)

### Total Investment:
- Domain Name ($15/year) - You'll need a ".com" for credibility
- Hosting ($100-300/year) - "Cheap" hosting costs more long-term
- Website Builder ($0-300/year) - Wix, Squarespace, WordPress.com
- Premium themes ($50-200) - Generic templates limit customization
- SEO tools ($20-100/month)

### Reality Check:
DIY builders promise "professional websites in hours," but most small business owners spend 40-80 hours learning the platform, creating content, and troubleshooting issues.

## Professional Website Development ($5,000-25,000)

### What You Get:
- Custom design that reflects your brand
- Mobile-responsive across all devices
- SEO optimization from day one
- Content management system
- Analytics setup
- Security implementation
- Ongoing support and maintenance

## Making the Investment Decision

The best website investment isn't about finding the cheapest option—it's about maximizing return on investment.`,
    publishedAt: "2024-01-10T14:30:00.000Z",
    category: "Business Strategy",
    tags: ["Website Cost", "Small Business", "Web Development", "ROI"],
    seo: {
      metaTitle: "Small Business Website Cost 2025: Complete Pricing Guide",
      metaDescription: "Discover the real cost of building a small business website in 2025. From DIY options to professional development, we break down every expense.",
      keywords: "small business website cost, website pricing, web development cost, website investment"
    }
  }
];

/**
 * Convert existing blog post content to Strapi blocks format
 * This is a simplified converter - you may need to enhance it based on your content structure
 */
function convertToStrapiBlocks(content: string) {
  const blocks = [];
  const lines = content.split('\n').filter(line => line.trim());

  for (const line of lines) {
    const trimmed = line.trim();
    
    if (trimmed.startsWith('# ')) {
      // H1 Heading
      blocks.push({
        type: 'heading',
        level: 1,
        children: [{ type: 'text', text: trimmed.slice(2) }]
      });
    } else if (trimmed.startsWith('## ')) {
      // H2 Heading
      blocks.push({
        type: 'heading',
        level: 2,
        children: [{ type: 'text', text: trimmed.slice(3) }]
      });
    } else if (trimmed.startsWith('### ')) {
      // H3 Heading
      blocks.push({
        type: 'heading',
        level: 3,
        children: [{ type: 'text', text: trimmed.slice(4) }]
      });
    } else if (trimmed.startsWith('- ')) {
      // List item - you might want to group these into a list block
      blocks.push({
        type: 'list',
        format: 'unordered',
        children: [
          {
            type: 'list-item',
            children: [{ type: 'text', text: trimmed.slice(2) }]
          }
        ]
      });
    } else if (trimmed.length > 0) {
      // Regular paragraph
      const children = [];
      
      // Handle bold text **text**
      const boldRegex = /\*\*(.*?)\*\*/g;
      let lastIndex = 0;
      let match;
      
      while ((match = boldRegex.exec(trimmed)) !== null) {
        // Add text before the bold
        if (match.index > lastIndex) {
          children.push({
            type: 'text',
            text: trimmed.slice(lastIndex, match.index)
          });
        }
        
        // Add the bold text
        children.push({
          type: 'text',
          text: match[1],
          bold: true
        });
        
        lastIndex = match.index + match[0].length;
      }
      
      // Add remaining text
      if (lastIndex < trimmed.length) {
        children.push({
          type: 'text',
          text: trimmed.slice(lastIndex)
        });
      }
      
      blocks.push({
        type: 'paragraph',
        children: children.length > 0 ? children : [{ type: 'text', text: trimmed }]
      });
    }
  }

  return blocks;
}

/**
 * Generate Strapi-compatible JSON for each blog post
 */
function generateStrapiData() {
  const outputDir = path.join(process.cwd(), 'strapi-migration');
  
  // Create output directory
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  existingPosts.forEach((post, index) => {
    const strapiPost = {
      title: post.title,
      slug: post.slug,
      excerpt: post.excerpt,
      content: convertToStrapiBlocks(post.content),
      publishedAt: post.publishedAt,
      featured: index === 0, // Mark first post as featured
      seo: post.seo,
      // Note: You'll need to create categories and tags separately in Strapi
      // Then reference them by ID in the actual import
      category_name: post.category,
      tag_names: post.tags
    };

    // Write individual post file
    fs.writeFileSync(
      path.join(outputDir, `${post.slug}.json`),
      JSON.stringify(strapiPost, null, 2)
    );
  });

  // Generate categories file
  const categories = [...new Set(existingPosts.map(p => p.category).filter(Boolean))];
  const categoriesData = categories.map(name => ({
    name,
    slug: name?.toLowerCase().replace(/\s+/g, '-'),
    description: `Articles about ${name}`
  }));

  fs.writeFileSync(
    path.join(outputDir, 'categories.json'),
    JSON.stringify(categoriesData, null, 2)
  );

  // Generate tags file
  const allTags = existingPosts.flatMap(p => p.tags || []);
  const uniqueTags = [...new Set(allTags)];
  const tagsData = uniqueTags.map(name => ({
    name,
    slug: name.toLowerCase().replace(/\s+/g, '-')
  }));

  fs.writeFileSync(
    path.join(outputDir, 'tags.json'),
    JSON.stringify(tagsData, null, 2)
  );

  // Generate summary
  const summary = {
    totalPosts: existingPosts.length,
    categories: categories.length,
    tags: uniqueTags.length,
    files: [
      'categories.json - Create these categories in Strapi first',
      'tags.json - Create these tags in Strapi first',
      ...existingPosts.map(p => `${p.slug}.json - Blog post data`)
    ],
    instructions: [
      '1. Set up Strapi with BlogPost, Category, and Tag content types',
      '2. Import categories and tags first',
      '3. Import blog posts and link to categories/tags by ID',
      '4. Upload featured images to Strapi Media Library',
      '5. Test the API endpoints with your Next.js app'
    ]
  };

  fs.writeFileSync(
    path.join(outputDir, 'README.json'),
    JSON.stringify(summary, null, 2)
  );

  console.log(`✅ Migration files generated in ${outputDir}`);
  console.log(`📊 Generated ${existingPosts.length} blog posts, ${categories.length} categories, ${uniqueTags.length} tags`);
  console.log(`📖 Check README.json for import instructions`);
}

/**
 * Generate curl commands for importing data to Strapi
 */
function generateImportCommands() {
  const outputDir = path.join(process.cwd(), 'strapi-migration');
  const commands = [];
  
  commands.push('#!/bin/bash');
  commands.push('# Strapi Import Commands');
  commands.push('# Make sure to replace YOUR_STRAPI_URL and YOUR_API_TOKEN');
  commands.push('');
  commands.push('STRAPI_URL="http://localhost:1337"');
  commands.push('API_TOKEN="your-api-token-here"');
  commands.push('');

  // Commands to create categories
  commands.push('# Create Categories');
  const categories = JSON.parse(fs.readFileSync(path.join(outputDir, 'categories.json'), 'utf8'));
  categories.forEach((category: any) => {
    commands.push(`curl -X POST "$STRAPI_URL/api/categories" \\`);
    commands.push(`  -H "Authorization: Bearer $API_TOKEN" \\`);
    commands.push(`  -H "Content-Type: application/json" \\`);
    commands.push(`  -d '{"data":${JSON.stringify(category)}}'`);
    commands.push('');
  });

  // Commands to create tags
  commands.push('# Create Tags');
  const tags = JSON.parse(fs.readFileSync(path.join(outputDir, 'tags.json'), 'utf8'));
  tags.forEach((tag: any) => {
    commands.push(`curl -X POST "$STRAPI_URL/api/tags" \\`);
    commands.push(`  -H "Authorization: Bearer $API_TOKEN" \\`);
    commands.push(`  -H "Content-Type: application/json" \\`);
    commands.push(`  -d '{"data":${JSON.stringify(tag)}}'`);
    commands.push('');
  });

  fs.writeFileSync(
    path.join(outputDir, 'import-commands.sh'),
    commands.join('\n')
  );

  console.log(`📜 Import commands generated: ${outputDir}/import-commands.sh`);
}

// Run the migration
async function main() {
  console.log('🚀 Starting blog migration to Strapi format...');
  
  try {
    generateStrapiData();
    generateImportCommands();
    
    console.log('✅ Migration completed successfully!');
    console.log('');
    console.log('Next steps:');
    console.log('1. Set up Strapi backend (see STRAPI_SETUP_GUIDE.md)');
    console.log('2. Create content types in Strapi admin');
    console.log('3. Run the import commands or manually create content');
    console.log('4. Update your blog pages to use the Strapi API');
  } catch (error) {
    console.error('❌ Migration failed:', error);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}