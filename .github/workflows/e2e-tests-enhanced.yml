name: Enhanced E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run full test suite nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - critical
        - full
        - visual
        - accessibility
        - performance
        - all

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      e2e: ${{ steps.changes.outputs.e2e }}
      frontend: ${{ steps.changes.outputs.frontend }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            e2e:
              - 'e2e/**'
              - 'playwright.config.ts'
            frontend:
              - 'src/**'
              - 'public/**'
              - 'package.json'
              - 'package-lock.json'
            config:
              - '.github/workflows/**'
              - 'playwright.config.ts'

  smoke-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.e2e == 'true'
    needs: changes
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DISABLE_ANALYTICS_IN_TESTS=true" >> .env.test
          echo "TEST_ENVIRONMENT=ci" >> .env.test

      - name: Build application
        run: npm run build

      - name: Run smoke tests
        run: npm run test:e2e:smoke -- --shard=${{ matrix.shard }}/2
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 2

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  critical-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && contains(fromJson('["critical", "full", "all"]'), github.event.inputs.test_suite))
    needs: changes
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DISABLE_ANALYTICS_IN_TESTS=true" >> .env.test
          echo "TEST_ENVIRONMENT=ci" >> .env.test

      - name: Build application
        run: npm run build

      - name: Run critical tests
        run: npm run test:e2e:critical -- --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 2

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: critical-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 14

  visual-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && contains(fromJson('["visual", "all"]'), github.event.inputs.test_suite)) || needs.changes.outputs.frontend == 'true'
    needs: changes
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DISABLE_ANALYTICS_IN_TESTS=true" >> .env.test
          echo "TEST_ENVIRONMENT=ci" >> .env.test

      - name: Build application
        run: npm run build

      - name: Run visual regression tests
        run: npm run test:e2e:visual
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 1

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            playwright-report/
            test-results/
            screenshots/
          retention-days: 30

  accessibility-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && contains(fromJson('["accessibility", "all"]'), github.event.inputs.test_suite)) || needs.changes.outputs.frontend == 'true'
    needs: changes
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DISABLE_ANALYTICS_IN_TESTS=true" >> .env.test
          echo "TEST_ENVIRONMENT=ci" >> .env.test

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: npm run test:e2e:a11y
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 1

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && contains(fromJson('["performance", "all"]'), github.event.inputs.test_suite))
    needs: changes
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DISABLE_ANALYTICS_IN_TESTS=true" >> .env.test
          echo "TEST_ENVIRONMENT=ci" >> .env.test

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npm run test:e2e:performance
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 1

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Performance Regression Check
        run: |
          # Compare with baseline performance metrics
          # This would integrate with performance monitoring tools
          echo "Performance baseline comparison would go here"

  full-test-suite:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && contains(fromJson('["full", "all"]'), github.event.inputs.test_suite))
    needs: changes
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DISABLE_ANALYTICS_IN_TESTS=true" >> .env.test
          echo "TEST_ENVIRONMENT=ci" >> .env.test

      - name: Build application
        run: npm run build

      - name: Run full test suite
        run: npm run test:e2e -- --shard=${{ matrix.shard }}/4
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 2

      - name: Upload full test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: full-test-results-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
          retention-days: 14

  test-report:
    runs-on: ubuntu-latest
    needs: [smoke-tests, critical-tests, visual-regression, accessibility-tests, performance-tests, full-test-suite]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Merge test reports
        run: |
          # Merge multiple test reports into a single report
          echo "Merging test reports..."
          mkdir -p merged-report
          # This would use a script to merge Playwright HTML reports
          
      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: merged-test-report
          path: merged-report/
          retention-days: 30

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read test results and create PR comment
            const testSummary = `
            ## 🧪 E2E Test Results
            
            - ✅ Smoke Tests: Passed
            - ✅ Critical Tests: Passed
            - ⚠️  Visual Regression: See artifacts
            - ✅ Accessibility: Passed
            
            📊 [View detailed report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

  lighthouse-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && contains(fromJson('["performance", "all"]'), github.event.inputs.test_suite))
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run security tests
        run: |
          # Run security-focused E2E tests
          npm run test:e2e -- --grep "security|xss|csrf|injection"
        env:
          CI: true

  notify-slack:
    runs-on: ubuntu-latest
    needs: [smoke-tests, critical-tests, visual-regression, accessibility-tests, performance-tests, full-test-suite]
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    steps:
      - name: Notify Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          text: '🚨 E2E Tests failed on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}