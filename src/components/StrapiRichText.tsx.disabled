/**
 * Strapi Rich Text Renderer
 * Renders Strapi's rich text blocks using @strapi/blocks-react-renderer
 */

import React from 'react';
import { BlocksRenderer, type BlocksContent } from '@strapi/blocks-react-renderer';
import Image from 'next/image';
import Link from 'next/link';
import { getStrapiImageUrl } from '@/lib/strapi';

interface StrapiRichTextProps {
  content: BlocksContent;
  className?: string;
}

export function StrapiRichText({ content, className = '' }: StrapiRichTextProps) {
  return (
    <div className={`prose prose-lg max-w-none ${className}`}>
      <BlocksRenderer
        content={content}
        blocks={{
          // Custom heading renderer
          heading: ({ children, level }) => {
            const Tag = `h${level}` as keyof React.JSX.IntrinsicElements;
            const headingClasses = {
              1: 'text-4xl font-bold text-white mb-6 mt-8',
              2: 'text-3xl font-bold text-white mb-4 mt-8',
              3: 'text-2xl font-bold text-cyan-400 mb-3 mt-6',
              4: 'text-xl font-semibold text-white mb-2 mt-4',
              5: 'text-lg font-semibold text-white mb-2 mt-4',
              6: 'text-base font-semibold text-white mb-1 mt-3',
            };
            
            return (
              <Tag className={headingClasses[level as keyof typeof headingClasses]}>
                {children}
              </Tag>
            );
          },

          // Custom paragraph renderer
          paragraph: ({ children }) => (
            <p className="text-gray-300 mb-4 leading-relaxed">
              {children}
            </p>
          ),

          // Custom list renderers
          list: ({ children, format }) => {
            const ListTag = format === 'ordered' ? 'ol' : 'ul';
            const listClasses = format === 'ordered' 
              ? 'list-decimal list-inside space-y-2 ml-6 mb-4'
              : 'list-disc list-inside space-y-2 ml-6 mb-4';
            
            return (
              <ListTag className={listClasses}>
                {children}
              </ListTag>
            );
          },

          'list-item': ({ children }) => (
            <li className="text-gray-300">
              {children}
            </li>
          ),

          // Custom quote renderer
          quote: ({ children }) => (
            <blockquote className="border-l-4 border-cyan-400 pl-6 py-4 mb-6 bg-gray-800/30 rounded-r-lg">
              <div className="text-gray-300 italic text-lg">
                {children}
              </div>
            </blockquote>
          ),

          // Custom code renderer
          code: ({ children }) => (
            <pre className="bg-gray-900 border border-gray-700 rounded-lg p-4 mb-4 overflow-x-auto">
              <code className="text-green-400 text-sm font-mono">
                {children}
              </code>
            </pre>
          ),

          // Custom image renderer
          image: ({ image }) => {
            const imageUrl = getStrapiImageUrl(image.url);
            return (
              <div className="my-8 rounded-lg overflow-hidden">
                <Image
                  src={imageUrl}
                  alt={image.alternativeText || ''}
                  width={image.width || 800}
                  height={image.height || 400}
                  className="w-full h-auto"
                  priority={false}
                />
                {image.alternativeText && (
                  <p className="text-center text-gray-500 text-sm mt-2 italic">
                    {image.alternativeText}
                  </p>
                )}
              </div>
            );
          },

          // Custom link renderer
          link: ({ children, url }) => {
            const isExternal = url.startsWith('http') && !url.includes(process.env.NEXT_PUBLIC_APP_URL || '');
            
            if (isExternal) {
              return (
                <a
                  href={url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-cyan-400 hover:text-cyan-300 underline decoration-cyan-400/50 hover:decoration-cyan-300"
                >
                  {children}
                </a>
              );
            }

            return (
              <Link
                href={url}
                className="text-cyan-400 hover:text-cyan-300 underline decoration-cyan-400/50 hover:decoration-cyan-300"
              >
                {children}
              </Link>
            );
          },
        }}
        modifiers={{
          bold: ({ children }) => (
            <strong className="font-bold text-white">
              {children}
            </strong>
          ),
          italic: ({ children }) => (
            <em className="italic text-gray-200">
              {children}
            </em>
          ),
          underline: ({ children }) => (
            <u className="underline decoration-cyan-400/50">
              {children}
            </u>
          ),
          strikethrough: ({ children }) => (
            <s className="line-through opacity-75">
              {children}
            </s>
          ),
          code: ({ children }) => (
            <code className="bg-gray-800 text-green-400 px-2 py-1 rounded text-sm font-mono">
              {children}
            </code>
          ),
        }}
      />
    </div>
  );
}

export default StrapiRichText;